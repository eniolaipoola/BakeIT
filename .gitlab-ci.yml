image: openjdk:8-jdk

variables:
  ANDROID_COMPILE_SDK: "29"
  ANDROID_BUILD_TOOLS: "29.0.1"
  ANDROID_SDK_TOOLS: "4333796"

before_script:

  # installing packages
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

  # installing the android sdk
  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
  - unzip -d android-sdk-linux android-sdk.zip
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null

  # setting up the environment
  - export ANDROID_HOME=$PWD/android-sdk-linux
  - export PATH=$PATH:$PWD/android-sdk-linux
  - chmod +x ./gradlew

  # cache gradle folder
  - export GRADLE_USER_HOME=$(pwd)/.gradle
  - chmod +x ./gradlew

  # temporarily disable checking for EPIPE error and use yes to accept all licenses
  - set +o pipefail
  - yes | android-sdk-linux/tools/bin/sdkmanager --licenses     # responsible for accepting android sdk licenses
  - set -o pipefail

cache:
  key: ${CI_PROJECT_ID}
  paths:
    - .gradle/

stages:
  - build
  - test
  - release
  - deploy

lintDebug:
  stage: build
  script:
    - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint

assembleDebug:
  stage: build
  script:
    - ./gradlew assembleDebug

  artifacts:
    paths:
      - app/build/outputs/

testDebug:
  stage: test
  script:
    - ./gradlew -Pci --console=plain :app:testDebug

debugTests:
  stage: test
  script:
    - ./gradlew -Pci --console=plain :app:testDebug

build:
  script:
    - ./gradlew assembleDebug
  artifacts:
    paths: - app/build/outputs